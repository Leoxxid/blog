{:uriI"ïfile://app/assets/global/plugins/codemirror/mode/scheme/index.html?type=text/html&id=5fac31ee48a5699d63067982acd73109d394bac3ba69812fe6d83a62b8aa5ea7:ET:load_pathI"app/assets/global;T:filenameI"@app/assets/global/plugins/codemirror/mode/scheme/index.html;T:	nameI")plugins/codemirror/mode/scheme/index;T:logical_pathI".plugins/codemirror/mode/scheme/index.html;T:content_typeI"text/html;T:sourceI"≠
<!doctype html>
<title>CodeMirror: Scheme mode</title>
<meta charset="utf-8" />
<link rel=stylesheet href="../../doc/docs.css">
<link rel="stylesheet" href="../../lib/codemirror.css">
<script src="../../lib/codemirror.js"></script>
<script src="scheme.js"></script>
<style>
    .CodeMirror {
        background: #f8f8f8;
    }
</style>
<div id=nav>
    <a href="http://codemirror.net">
        <h1>CodeMirror</h1>
        <img id=logo src="../../doc/logo.png">
    </a>
    <ul>
        <li>
            <a href="../../index.html">Home</a>
            <li>
                <a href="../../doc/manual.html">Manual</a>
                <li>
                    <a href="https://github.com/codemirror/codemirror">Code</a>
    </ul>
    <ul>
        <li>
            <a href="../index.html">Language modes</a>
            <li>
                <a class=active href="#">Scheme</a>
    </ul>
</div>
<article>
    <h2>Scheme mode</h2>
    <form>
        <textarea id="code" name="code"> ; See if the input starts with a given symbol. (define (match-symbol input pattern) (cond ((null? (remain input)) #f) ((eqv? (car (remain input)) pattern) (r-cdr input)) (else #f))) ; Allow the input to start with one of a list of patterns. (define
            (match-or input pattern) (cond ((null? pattern) #f) ((match-pattern input (car pattern))) (else (match-or input (cdr pattern))))) ; Allow a sequence of patterns. (define (match-seq input pattern) (if (null? pattern) input (let ((match (match-pattern
            input (car pattern)))) (if match (match-seq match (cdr pattern)) #f)))) ; Match with the pattern but no problem if it does not match. (define (match-opt input pattern) (let ((match (match-pattern input (car pattern)))) (if match match input)))
            ; Match anything (other than '()), until pattern is found. The rather ; clumsy form of requiring an ending pattern is needed to decide where ; the end of the match is. If none is given, this will match the rest ; of the sentence. (define (match-any
            input pattern) (cond ((null? (remain input)) #f) ((null? pattern) (f-cons (remain input) (clear-remain input))) (else (let ((accum-any (collector))) (define (match-pattern-any input pattern) (cond ((null? (remain input)) #f) (else (accum-any
            (car (remain input))) (cond ((match-pattern (r-cdr input) pattern)) (else (match-pattern-any (r-cdr input) pattern)))))) (let ((retval (match-pattern-any input (car pattern)))) (if retval (f-cons (accum-any) retval) #f)))))) </textarea>
    </form>
    <script>
        var editor = CodeMirror.fromTextArea(document.getElementById("code"),
        {});
    </script>
    <p>
        <strong>MIME types defined:</strong> <code>text/x-scheme</code>.</p>
</article>;T:metadata{	:dependencieso:Set:
@hash}
I"environment-version;TTI"environment-paths;TTI"rails-env;TTI"2processors:type=text/html&file_type=text/html;TTI"Nfile-digest://app/assets/global/plugins/codemirror/mode/scheme/index.html;TTF:charsetI"
utf-8;F:digest"%nä§é_ wŸ˘ƒ‰À‘9¶YAﬁ5»&äç›≥1G:lengthi≠
:dependencies_digest"%ÎDÁª£±§7xuP«µâ2§üÙÎ÷ìj*¸hŒt“ˇ
ﬂ:idI"E5fac31ee48a5699d63067982acd73109d394bac3ba69812fe6d83a62b8aa5ea7;F:
mtimel+^ØÚW