{:uriI"ëfile://app/assets/global/plugins/codemirror/mode/go/index.html?type=text/html&id=48dad98b0d97697ae446cca71c9f58e660adc1f6121e018aee71d8ffd59395f7:ET:load_pathI"app/assets/global;T:filenameI"<app/assets/global/plugins/codemirror/mode/go/index.html;T:	nameI"%plugins/codemirror/mode/go/index;T:logical_pathI"*plugins/codemirror/mode/go/index.html;T:content_typeI"text/html;T:sourceI"c	<!doctype html>
<title>CodeMirror: Go mode</title>
<meta charset="utf-8" />
<link rel=stylesheet href="../../doc/docs.css">
<link rel="stylesheet" href="../../lib/codemirror.css">
<link rel="stylesheet" href="../../theme/elegant.css">
<script src="../../lib/codemirror.js"></script>
<script src="../../addon/edit/matchbrackets.js"></script>
<script src="go.js"></script>
<style>
    .CodeMirror {
        border: 1px solid #999;
        background: #ffc
    }
</style>
<div id=nav>
    <a href="http://codemirror.net">
        <h1>CodeMirror</h1>
        <img id=logo src="../../doc/logo.png">
    </a>
    <ul>
        <li>
            <a href="../../index.html">Home</a>
            <li>
                <a href="../../doc/manual.html">Manual</a>
                <li>
                    <a href="https://github.com/codemirror/codemirror">Code</a>
    </ul>
    <ul>
        <li>
            <a href="../index.html">Language modes</a>
            <li>
                <a class=active href="#">Go</a>
    </ul>
</div>
<article>
    <h2>Go mode</h2>
    <form>
        <textarea id="code" name="code"> // Prime Sieve in Go. // Taken from the Go specification. // Copyright ¬© The Go Authors. package main import "fmt" // Send the sequence 2, 3, 4, ... to channel 'ch'. func generate(ch chan&lt;- int) { for i := 2; ; i++ { ch &lt;- i // Send 'i'
            to channel 'ch' } } // Copy the values from channel 'src' to channel 'dst', // removing those divisible by 'prime'. func filter(src &lt;-chan int, dst chan&lt;- int, prime int) { for i := range src { // Loop over values received from 'src'.
            if i%prime != 0 { dst &lt;- i // Send 'i' to channel 'dst'. } } } // The prime sieve: Daisy-chain filter processes together. func sieve() { ch := make(chan int) // Create a new channel. go generate(ch) // Start generate() as a subprocess.
            for { prime := &lt;-ch fmt.Print(prime, "\n") ch1 := make(chan int) go filter(ch, ch1, prime) ch = ch1 } } func main() { sieve() } </textarea>
    </form>
    <script>
        var editor = CodeMirror.fromTextArea(document.getElementById("code"),
        {
            theme: "elegant",
            matchBrackets: true,
            indentUnit: 8,
            tabSize: 8,
            indentWithTabs: true,
            mode: "text/x-go"
        });
    </script>
    <p>
        <strong>MIME type:</strong> <code>text/x-go</code></p>
</article>;T:metadata{	:dependencieso:Set:
@hash}
I"environment-version;TTI"environment-paths;TTI"rails-env;TTI"2processors:type=text/html&file_type=text/html;TTI"Jfile-digest://app/assets/global/plugins/codemirror/mode/go/index.html;TTF:charsetI"
utf-8;F:digest"%Räa1?“OObdÏ4l≠íçÌÈ	˝†”˛°'U:lengthic	:dependencies_digest"%ëª¶√∞d[˜Ïe6|™GﬁkD≈É!¨ﬂ :idI"E48dad98b0d97697ae446cca71c9f58e660adc1f6121e018aee71d8ffd59395f7;F:
mtimel+^ØÚW